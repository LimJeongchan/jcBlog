---
layout: post
title:  "01장 계층화"
date:   2021-11-16 13:51:03 +0900
categories: jekyll update
---
1. 계층화 정의 : 소프트웨어 설계자가 복잡한 소프트웨어 시스템을 분할하는 데 사용하는 가장 일반적인 기법.
2. 계층화의 장점 
	- 다른 계층에 대한 정보 없이도 단일 계층을 하나의 일관된 계층으로 이해할 수 있다.
	- 동일한 기본 서비스를 가진 대안 구현으로 계층을 대체할 수 있다.
	- 계층 간의 의존성을 최소화할 수 있다.
	- 계층은 표준화하기 좋은 위치다.
	- 한번 구축한 계층은 여러 다른 상위 서비스에서 사용할 수 있다.
3. 계층화의 단점
	- 계층은 전체가 효과적으로 캡슐화되지 않는다. 그 결과, 뭔가를 변경했을 때 다른 계층에 영향을 미치는 경우가 있다.
	- 계층을 추가하면 성능이 저하된다.
4. 엔터프라이즈 애플리케이션에서 계층의 발전
	- 일괄 처리 시스템
		- 이시절 계층화는 그리 중요한 개념이 아님,  ISAMS, VSAM등 파일을 조작하는 것으로 충분했기 때문
	- 90년대 클라이언트-서버 시스템의 등장
		- 클라이언트-서버 시스템이란 클라이언트가 사용자 인터페이스와 다른 애플리케이션 코드를 포함하고 서버가 관계형 데이터베이스를 포함하는 2계층 시스템
		- 단순 업데이트 하는 간단한 기능을 수행하는데 적합.
		- 문제점 1 : 도메인 논리(계산, 유효성 검사, 계산 등) 변경이 이루어 졌을 때 수많은 코드를  찾아야 함.
		- 문제점 2: 문제점 1대안으로 프로시저를 만들었는데 프로시저는 공급 업체별로 다르기 때문에 종속성 문제가 발생. 
	- 객체지향 세계의 시작과 웹의 등장
		- 객체지향 커뮤니티에서 도메인 논리에 대한 해결책으로 3계층 시스템을 제안.
		- 웹의 등장으로 웹배포를 위한 3계층 시스템 도입이 필요하게 되었다.
- 티어 : 물리적 분리를 함축하는 경우. (ex : 클라이언트-서버 시스템 은 2계층)
- 계층 : 다른시스템에서 실행할 필요가 없음을 강조하기 위해 계층이라는 용어를 사용
5. 세 가지 주요 계층
	- 프레젠테이션 :서비스 제공, 정보 표시(창 또는 HTML),  사용자 요청(마우스 클릭, 키누름), HTTP 요청, 명령줄 호출, 일괄 작업 API 처리
	- 도메인 : 시스템의 핵심이 되는 논리
	- 데이터 원본 : 데이터 베이스, 메시징 시스템, 트랜잭션 관리자 및 다른 패키지와 의 통신
6. 계층이 실행될 위치 선택
	- 서버에서 모든걸 실행했을 때의 장점 
		- 업그레이드나 수정이 쉽다.
		- 데스크톱 서버 동기화를 신경쓰지 않아도 된다.
		- 다른 데스크톱 소프트웨어와의 호환성 문제도 없다.
	- 클라이언트에서 모든걸 실행했을 때의 장점
		-  응답성이나 비연결 작업이 유리함.
	- 계층별로 실행 할 수 있는 위치 선택
		- 프레젠테이션 계층 : 사용자 인터페이스의 유형에 따라 달라진다. 리치 클라이언트의 경우 대부분 클라이언트에서 실행, 웹 인터페이스의 경우 거의 대부분 서버에서 실행. 특별한 사유가 없으면 웹에서 실행되는 프레젠 테이션을 권장.
		- 도메인 논리 계층 : 서버 , 클라이언트 모두 실행 가능 하나 서버에서 실행하는 것이 유지 관리를 생각할 때 최선의 방법 모든 논리를 한곳에서 관리 할 수 있기 때문. 일부 클라이언트에서 실행할 경우 다른 시스템에 의존하지 않는 독립적 모듈로 만들 것.
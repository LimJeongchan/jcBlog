---
layout: post
title:  "옵저버 패턴"
date:   2021-11-01 13:33:03 +0900
categories: study update
---

- 목표 : 옵저버 패턴의 이론을 이해하고 샘플 코드를 작성 해본다. 추가로 mvc 패턴에서 옵저버 패턴을 어떻게 활용하였는지 살펴본다.

#### **정의**
1. 옵서버 패턴(observer pattern)은 객체의 상태 변화를 관찰하는 관찰자들, 즉 옵저버들의 목록을 객체에 등록하여 상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴이다. (출처 : 위키피디아)
2. 비슷한 패턴으로는 publihser - subscriber이 있고, Listener 라고 불리기도 한다.
- ![옵저버 패턴]({{site.url}}/{{site.baseurl}}/img/observer.png )

#### **본문**
1. 옵저버 패턴을 사용하는 이유
	- 옵저버 패턴을 사용하지 않으면 event를 체크해야되는 object들은 evnt 가 일어 났는지 계속 확인해야 함 (1h, 1m, 1s 주기로) 이런 행위를 polling이라 하는데  불필요한 리소스 낭비가 발생 되며 polling interver 내에 이벤트가 발생 하였다가 사라지면 이벤트가 일어 났었는지 확인할 수 없다
2. Weather-O-Rama 사의 기상 모니터링 애플리케이션 예제 (Head First Design Patterns, 예제 출처 : https://itseongmin.tistory.com/2?category=939200)
	- 옵저버 패턴에서는 두가지 방식이 존재합니다. 
	1. 데이터를 발행하는 주체가 데이터를 보내는방식  (푸시 (Push)방식)
	2. 데이터를 구독하는쪽에서 데이터를 가져가는 방식  (풀 (Pull)방식
- ![Head First Design Patterns]({{site.url}}/{{site.baseurl}}/img/head.jpg )
- ![Weather-O-Rama]({{site.url}}/{{site.baseurl}}/img/weather.png )
	- 1. Observer (interface)
	```java
		package com.jcblog.Weather;

		public interface Observer {
			//	public void update(float temp, float humidity, float pressure); //Push 방식
			public void update(Subject subject); //Pull 방식
		}
	```
	
	- 2. Subject (interface)
	```java
		package com.jcblog.Weather;

		public interface Subject {
			public void registerObserver(Observer o);

			public void removeObserver(Observer o);

			public void notifyObservers();
		}
	```
	
	- 3. DisplayElement (interface)
	```java
		package com.jcblog.Weather;

		public interface DisplayElement {
			public void display();
		}
	```
	
	- 4. WeatherData
	```java
		package com.jcblog.Weather;

		import java.util.ArrayList;

		import java.util.*;

		public class WeatherData implements Subject {
			private ArrayList<Observer> observers;
			private float temperature;
			private float humidity;
			private float pressure;
			private boolean changed = false;

			public WeatherData() {
				observers = new ArrayList<Observer>();
			}

			public void registerObserver(Observer o) {
				observers.add(o);
			}

			public void removeObserver(Observer o) {
				int i = observers.indexOf(o);
				if (i >= 0) {
					observers.remove(i);
				}
			}

			public void notifyObservers() {
				for (Observer observer : observers) {

		//				observer.update(temperature, humidity, pressure); //push 방식
					observer.update(this); // pull 방식
				}
			}

			public void measurementsChanged() {
				notifyObservers();
			}

			public void setMeasurements(float temperature, float humidity, float pressure) {
				this.temperature = temperature;
				this.humidity = humidity;
				this.pressure = pressure;
				measurementsChanged();
			}

			public float getTemperature() {
				return temperature;
			}

			public void setTemperature(float temperature) {
				this.temperature = temperature;
			}

			public void setHumidity(float humidity) {
				this.humidity = humidity;
			}

			public void setPressure(float pressure) {
				this.pressure = pressure;
			}

			public float getHumidity() {
				return humidity;
			}

			public float getPressure() {
				return pressure;
			}

		}
	```
	
	- 5. CurrentConditionsDisplay
	```java
		package com.jcblog.Weather;

		// 변경사항을 받기위한 Observer, 디스플레이 항목 구현
		public class CurrentConditionsDisplay implements Observer, DisplayElement {
			private float temperature;
			private float humidity;
			private String measuredTime;
			private Subject weatherData;

			public CurrentConditionsDisplay(Subject weatherData) {
				this.weatherData = weatherData;
				weatherData.registerObserver(this);
			}

		// Push방식일때 이거씁니다.
		//	public void update(float temperature, float humidity, float pressure) {
		//		this.temperature = temperature;
		//		this.humidity = humidity;
		//		display();
		//	}

			//Pull 방식
			public void update(Subject subject) {
				TimedWeatherData weatherData = (TimedWeatherData)subject;
				this.temperature = weatherData.getTemperature();
				this.humidity = weatherData.getHumidity();
				this.measuredTime = weatherData.getMeasuredTime();
				display();
			}

			public void display() {
				System.out.println("[Time: " + measuredTime +"]");
				System.out.println("Current conditions: " + temperature
						+ "F degrees and " + humidity + "% humidity");
			}
		}
	```	
	
	- 6. ForecastDisplay
	```java
		package com.jcblog.Weather;

		public class ForecastDisplay implements Observer, DisplayElement {
			private float currentPressure = 29.92f;
			private float lastPressure;
			private WeatherData weatherData;

			public ForecastDisplay(WeatherData weatherData) {
				this.weatherData = weatherData;
				weatherData.registerObserver(this);
			}
		//Push 방식
		//	public void update(float temp, float humidity, float pressure) {
		//        lastPressure = currentPressure;
		//		currentPressure = pressure;
		//
		//		display();
		//	}

			//Pull 방식
			public void update(Subject subject) {
				WeatherData weatherData = (WeatherData) subject;
				lastPressure = currentPressure;
				currentPressure = weatherData.getPressure();
				display();
			}

			public void display() {
				System.out.print("Forecast: ");
				if (currentPressure > lastPressure) {
					System.out.println("Improving weather on the way!");
				} else if (currentPressure == lastPressure) {
					System.out.println("More of the same");
				} else if (currentPressure < lastPressure) {
					System.out.println("Watch out for cooler, rainy weather");
				}
			}
		}
	```	
	
	- 7. StatisticsDisplay
	```java
		package com.jcblog.Weather;

		public class StatisticsDisplay implements Observer, DisplayElement {
			private float maxTemp = 0.0f;
			private float minTemp = 200;
			private float tempSum = 0.0f;
			private int numReadings;
			private WeatherData weatherData;

			public StatisticsDisplay(WeatherData weatherData) {
				this.weatherData = weatherData;
				weatherData.registerObserver(this);
			}
		// Push방식
		//	public void update(float temp, float humidity, float pressure) {
		//		tempSum += temp;
		//		numReadings++;
		//
		//		if (temp > maxTemp) {
		//			maxTemp = temp;
		//		}
		//
		//		if (temp < minTemp) {
		//			minTemp = temp;
		//		}
		//
		//		display();
		//	}

			//Pull 방식
			public void update(Subject subject) {
				WeatherData weatherData = (WeatherData) subject;
				float temp = weatherData.getTemperature();

				tempSum += temp;
				numReadings++;

				if (temp > maxTemp) {
					maxTemp = temp;
				}

				if (temp < minTemp) {
					minTemp = temp;
				}

				display();
			}

			public void display() {
				System.out.println("Avg/Max/Min temperature = " + (tempSum / numReadings) + "/" + maxTemp + "/" + minTemp);
			}
		}
	```	
	
	- 8. WeatherStation
	```java
		package com.jcblog.Weather;

		import java.util.Timer;
		import java.util.TimerTask;

		public class WeatherStation {
			static WeatherData weatherData;
			static float temperature = 80.0f;
			static float lastTemperature = 80.0f;
			static float humidity = 65.0f;
			static float pressure = 30.0f;

			public static void main(String[] args) {
				System.out.println("실행합니다.");
				//weatherData = new WeatherData();
				weatherData = new TimedWeatherData();

				CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);
				StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);
				ForecastDisplay forecastDisplay = new ForecastDisplay(weatherData);

				Timer jobScheduler = new Timer();
				TimerTask task = new TimerTask() {
					public void run() {
						temperature = (float) (temperature + Math.random() * 0.1);
						humidity = (float) (humidity + Math.random() * 0.1);
						pressure = (float) (pressure + Math.random() * 0.1);
						weatherData.setMeasurements(temperature, humidity, pressure);
					}
				};
				jobScheduler.schedule(task, 0, 1000);
			}
		}
	```	
	
	- 9. WeatherStation
	```java
		package com.jcblog.Weather;

		import java.util.Date;

		public class TimedWeatherData extends WeatherData {
			private String measuredTime;

			public TimedWeatherData() {
			}

			public String getMeasuredTime() {
				return measuredTime;
			}

			public void setMeasuredTime(String measuredTime) {
				this.measuredTime = measuredTime;
			}

			public void setMeasurements(float temperature, float humidity, float pressure) {
				// 오버라이딩 되어서 구현되어야 함.
				// measuredTime 정보도 설정되어야 함.
				this.measuredTime = new Date().toString();
				setTemperature(temperature);
				setHumidity(humidity);
				setPressure(pressure);
				measurementsChanged();
			}

		}
	```	
3. MVC 패턴에서 옵저버 패턴 활용
	- 옵서버 패턴은 모델-뷰-컨트롤러(Model-View-controller, MVC) 패러다임과 자주 결합된다. 옵저버 패턴은 MVC에서 모델과 뷰 사이를 느슨히 연결하기 위해 사용된다. 대표적으로 모델에서 일어나는 이벤트를 통보받는 옵저버는 뷰의 내용을 바꾸는 스위치를 작동 시킨다.
	
4. 느슨한 결합(Loose Coupling)의 위력
	- 두 객체가 느슨하게 결합되어 있다는 것은, 그 둘이 상호작용을 하긴 하지만 서로에 대해 잘 모르는 것을 의미합니다. 옵저버 패턴에서는 주제와 옵저버가 느슨하게 결합되어 있는 객체 디자인을 제공합니다.
	- 느슨한 결합의 장점은 다음과 같습니다.
	1. 옵저버를 언제든 새로 추가, 제거할 수 있다.
	2. 새로운 형식의 옵저버라 할 지라도 주제를 전혀 변경할 필요가 없다.
	3. 주제와 옵저버는 서로 독립적으로 재사용 할 수 있다.
	4. 주제나 옵저버가 바뀌더라도 서로에게 영향을 미치지 않는다.
	- 디자인원칙 : 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용해야 한다. (Loose Coupling 디자인을 활용하면 변경사항이 생겨도 무난히 처리할 수 있는 유연한 객체지향 시스템을 구축할 수 있습니다. 객체 사이의 상호의존성을 최소화 할 수 있기 때문이다.)	
---
layout: post
title:  "02장 도메인 논리 구성"
date:   2021-11-17 10:06:03 +0900
categories: jekyll update
---
1. 도메인 논리의 3가지 주요 패턴
	- 트랜잭션 스크립트 : 사용자가 수행할 각 작업마다 프로시저 하나씩 사용하는 방식. 
	- 도메인 모델 :   복잡한 논리 해결을 위한 객체 지향적 방법, 최종 객체가 결과를 내놓을때 까지 관련된 논리를 각 객체가 일부를 담당하는 방식.
	- 테이블 모듈 : 트랜잭션 스크립트와 도메인 모델의 중간적인 성격, 데이터 베이스에 쿼리를 수행해 레코드 집합을 얻고 레코드 집한을 인수로 전달해 객체를 만들어 작업을 수행.
2. 트랜잭션 스크립트
	- 장점 
		- 대부분의 개발자가 이해할 수 있는 간단한 절차적 모델
		- 행 데이터 게이트웨이나 테이블 데이터 게이트웨이를 적용해 데이터 원본 계층과 함께 사용하기에 적합
		- 트랜잭션의 경계를 설정하기가 쉽다. 트랜잭션 열기와 함께 시작되고 트랜잭션 닫기와 함께 종료된다. 툴을 사용해 배후에서 이러한 작업을 하기도 쉽다.
	- 단점
		- 도메인 논리가 늘어나면 복잡도가 상승
		- 여러 트랜잭션이 비슷한 작업을 수행해야 하므로 코드가 많이 중복됨.
3. 도메인 모델
	- 장점
		- 복잡한 논리를 체계적으로 관리할 수 있다.
	- 단점
		- 데이터 원본 계층의 복잡성으로 좋은 데이터 원본 계층을 확보하는데 비용과 시간이 필요.
		- 사용의 복잡성 으로 리치 객체 모델을 처음 시작하는 개발자가 도메인 모델에 익숙해 지는데 시간이 필요.
4. 테이블 모듈
	- 장점
		- 테이블 기준으로 도메인 논리를 구성하기 때문에 구조를 만들고 중복을 찾아 제거하기 수월
		- 아키텍처의 나머지 부분과 잘 맞음. (ex : 여러 GUI  환경에서 SQL 쿼리 결과를 활용)
	- 단점
		- 상속, 전략, 다른 객체지향 패턴과 같이 논리의 세부 구조를 만드는 데 사용하는 여러 기법은 사용할 수  없다.
5. 도메인 논리 선택
	- 도메인 논리가 간단하면 도메인 모델 효율이 떨어지고 반대로 도메인 논리가 복잡하면 트랜잭션 스크립트와 테이블 모듈 효율성이 떨이짐.
	- 테이블 모듈에 대한 선호도는 환경에서 레코드 집합을 얼마나 잘 지원 하느냐에 따라 결정(.NEW, 비쥬얼 스튜디오 같은 환경에서 유리) 
6. 서비스 계층
	- 도메인 논리를 처리하는 일반적인 방법 : 도메인 계층을 둘로 나누어 서비스 계층을 기반이 되는 도메인 모델이나 테이블 모듈 위에 배치.
	- 트랜잭션 스크립트만 사용하는 도메인 계층은 복잡하지 않기 때문에  도메인 모델이나 테이블 모듈에만 사용.?
	- 서비스 계층 사용 형식1 : 가장 소극적 사례로, 서비스 계층을 파사드로 만들고 모든 실제 동작을 기반 객체에 넣은 다음 서비스 계층이 파사드에 대한 호출을 하위 객체로 전달하게 하는것
	- 서비스 계층 사용 형식2 : 형식 1과  반대되는 극단적 사례, 대부분의 비즈니스 논리를 서비스 계층 안에 트랜잭션 스크립트를 넣는 것.
	- 컨트롤러-엔티티 형식 : 형식 1과, 형식 2의 중간적인 성격, 한 트랜잭션이나 유스 케이스에 적용되는 논리를 트랜잭션 스크립트에 넣는 것이며 일반적으로 컨트롤러나 서비스라고 한다.
- 파사드 패턴 : Facade는 "건물의 정면"을 의미하는 단어로 어떤 소프트웨어의 다른 커다란 코드 부분에 대하여 간략화된 인터페이스를 제공해주는 디자인 패턴을 의미합니다.

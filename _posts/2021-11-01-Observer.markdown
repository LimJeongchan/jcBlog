---
layout: post
title:  "옵저버 패턴"
date:   2021-11-01 13:33:03 +0900
categories: study update
---
- 목표 : 옵저버 패턴의 이론을 이해하고 샘플 코드를 작성 해본다. 추가로 mvc 패턴에서 옵저버 패턴을 어떻게 활용하였는지 살펴본다.
---
정의
1.  옵서버 패턴(observer pattern)은 객체의 상태 변화를 관찰하는 관찰자들, 즉 옵저버들의 목록을 객체에 등록하여 상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴이다. (출처 : 위키피디아)
2. 비슷한 패턴으로는 publihser - subscriber이 있고, Listener 라고 불리기도 한다.
- ![옵저버 패턴]({{site.url}}/{{site.baseurl}}/img/observer.png )

본문
1. 옵저버 패턴을 사용하는 이유
	- 옵저버 패턴을 사용하지 않으면 event를 체크해야되는 object들은 evnt 가 일어 났는지 계속 확인해야 함 (1h, 1m, 1s 주기로) 이런 행위를 polling이라 하는데  불필요한 리소스 낭비가 발생 되며 polling interver 내에 이벤트가 발생 하였다가 사라지면 이벤트가 일어 났었는지 확인할 수 없다
2. JAVA Observer 로 샘플코드 작성하기
	- simpleObserver
		```java
			package com.jcblog.simpleObserver;
			public class Button {
				public void onClick() {
					if (onclickListener != null)
						onclickListener.onClick(this);
				}
				public interface OnclickListener {
					public void onClick(Button button);
				}

				private OnclickListener onclickListener;

				public void setOnclickListener(OnclickListener onclickListener) {
					this.onclickListener = onclickListener;
				}
			}
			
			package com.jcblog.simpleObserver;

			public class Application {
				public static void main (String[] args) {
					Button button = new Button();
					button.setOnclickListener(new ButtonClick());

					button.onClick();
				}
			}

			class ButtonClick implements Button.OnclickListener{
				public void onClick(Button button) {
					System.out.println(button+" is Clicked");
				}
			}
		```
		
	- javaObserver 이용
		```java
			package com.jcblog.javaObserver;
			import java.util.Observable;

			public class Button extends Observable {
				public void onClick() {
					setChanged();
					notifyObservers();
				}
			}

			package com.jcblog.javaObserver;

			import java.util.Observable;
			import java.util.Observer;

			public class Application {


				public static void main (String[] args) {
					Button button = new Button();
					button.addObserver(new Observer() {
						public void update(Observable o, Object arg) {
							System.out.println(o + "is Cilcked");
						}
					});

					button.onClick();
				}
			}
		```
3. MVC 패턴에서 옵저버 패턴 활용
	- 옵서버 패턴은 모델-뷰-컨트롤러(Model-View-controller, MVC) 패러다임과 자주 결합된다. 옵저버 패턴은 MVC에서 모델과 뷰 사이를 느슨히 연결하기 위해 사용된다. 대표적으로 모델에서 일어나는 이벤트를 통보받는 옵저버는 뷰의 내용을 바꾸는 스위치를 작동 시킨다.
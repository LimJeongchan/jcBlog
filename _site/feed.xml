<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-11-28T23:22:53+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">임정찬의 블로그</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">03장 도메인 논리 구성</title><link href="http://localhost:4000/jekyll/update/2021/11/28/3%EC%9E%A5.html" rel="alternate" type="text/html" title="03장 도메인 논리 구성" /><published>2021-11-28T23:17:03+09:00</published><updated>2021-11-28T23:17:03+09:00</updated><id>http://localhost:4000/jekyll/update/2021/11/28/3%EC%9E%A5</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2021/11/28/3%EC%9E%A5.html">&lt;ul&gt;
  &lt;li&gt;관계형 데이터 베이스란 우리가 흔히 말하는 DB(ex:db2) 를 말하는것 같다.데이터 원본 계층에서 가장 중요한 일은 데이터베이스와 상호 작용하는 것이며 아래에서 여러 패턴에 대해서 알아보자
    &lt;ol&gt;
      &lt;li&gt;게이트웨이  : SQL 접근을 도메인 논리와는 별도로 불리하고 개별 클래스에 배치 하는 것이 좋다. 이런 클래스를  데이터베이스 테이블당 클래스 하나를 가지도록 구성한 것.&lt;/li&gt;
    &lt;/ol&gt;
    &lt;ul&gt;
      &lt;li&gt;게이트웨이를 구성한는 이유 : SQL을 쉽게 찾을 수 있게 하여 데이터 베이스에 전문 지식이 있는 개발자는 이런 특화 클래스에 집중하게 하고 애플리케이션 나머지 부분에서는 SQL에 대해 알 필요가 없게 하기 위함.&lt;/li&gt;
      &lt;li&gt;행 데이터 게이트웨이  : 쿼리가 반환하는 각 행마다 인스턴스 하나를 만드는 것.&lt;/li&gt;
      &lt;li&gt;테이블 데이터 게이트웨이 :  테이블당 인스턴스 하나를 만드는 것, 데이터 베이스를 쿼리하고 레코드 집합을 반환하는 메서드를 제공.
        &lt;ul&gt;
          &lt;li&gt;레코드 집합  : 데이터베이스의 테이블식 특성을 흉내 낸 테이블과 행의 범용 자료구조&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;게이트웨이 적용사례
        &lt;ul&gt;
          &lt;li&gt;테이블 모듈에서 테이블 데이터 게이트웨이를 사용하는 것이 적합. 저장 프로시저를 정리하는데도 이 패턴을 고려할 수 있다.&lt;/li&gt;
          &lt;li&gt;도메인 모델에서 사용할 때
            &lt;ul&gt;
              &lt;li&gt;활성 레코드 구조를 이용한 사례 : 활성레코드란 데이터베이스 테이블이나 뷰의 행을 래핑하고, 데이터 베이스 접근을 캡슐화하며, 해당 데이터에 대한 도메인 논리를 추가하는 객체,  간단한 애플리케이션에서 활용하는게 적절.
                &lt;ul&gt;
                  &lt;li&gt;단점 1: 도메인 논리가 복잡해지면 점차 리치 도메인( 뭔가 안좋은 거에는 리치를 붙인거를 봐서는 좋은 의미는 아닌거 같음)에 가까워지고 활성 레코드의 간단한 접근법으로는 주체 못하게 된다.&lt;/li&gt;
                  &lt;li&gt;단점 2: 관계형 데이터 베이스에서는 상속을 지원하지 않으므로 객채지향 패턴을 적용하기 어렵다.&lt;/li&gt;
                  &lt;li&gt;단점 3: 도메인 논리를 개발하는동안 데이터베이스와 상호 작용하지 않고도 도메인 논리를 테스트 할 수 있는 방법이 필요.&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;데이터 매퍼를 이용한 사례 : 데이터 매퍼란 객체와  데이터베이스 사이에서 둘 사이는 물론 매퍼 자체에 대한 독립성을 유지하면서 데이터를 옮기는 메퍼의 한계층이다. 도메인 모델을 데이터베이스로부터 격리하여 서로 독립적으로 작동할 수있게 중간에서 로직을 처리한다. 복잡한 논리에서 사용이 적합.
      2. 객체지향 데이터 베이스 : 객체지향 초창기에 객체와 관계간 근본적인 임피던스 부정합 이 있다는것을 깨닫고 객체지향 데이터 베이스를 만들었다.&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;인피던스 부정합(impedance mismatch) : 기존 관계형 데이터베이스의 SQL과 프로그래밍 언어 사이에 데이터 구조, 기능 등의 차이로 발생하는 충돌.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;객체지향 데이터 베이스의 장점으로는 생산성 향상을 들 수 있다.
        &lt;ol&gt;
          &lt;li&gt;매핑을 신경 쓸 필요가 없다.&lt;/li&gt;
          &lt;li&gt;상호 연결된 거대한 객체의 구조를 그대로 사용할 수 있다.&lt;/li&gt;
          &lt;li&gt;객체를 저장하고 가져오는 작업을 데이터베이스가 알아서 처리한다.&lt;/li&gt;
          &lt;li&gt;트랜잭션을 이용해 데이터 저장소의 업데이트와 공유 허용을 그룹화 할 수 있다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;이미 입증된 관계형 데이터 베이스에 비해 위험성이 높아 널리 사용되지 않는다.&lt;/li&gt;
      &lt;li&gt;객체지향 데이터 베이스를 사용할 수 없더라도 설계에 도메인 모델이 있다면 O/R 매핑 툴(ex : 하이버네이트)을 도입하는것을 고려해야 함.
        &lt;ul&gt;
          &lt;li&gt;O/R 매핑  : 객체 관계 매핑(Object-relational mapping; ORM)은 데이터베이스와 객체 지향 프로그래밍 언어 간의 호환되지 않는 데이터를 변환하는 프로그래밍 기법이다. 객체 지향 언어에서 사용할 수 있는 “가상” 객체 데이터베이스를 구축하는 방법이다.
            &lt;ol&gt;
              &lt;li&gt;동작 문제&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;추적 문제 : 다수의 객체를 메모리로 로드하고 수정할 때는 객체를 데이터베이스에 올바르게 기록하기 위해 수정한 객체를 모두 추적해야 된다. 복잡한 상황에서 고려해야 되는 것이 많다.(ex : 새로 생성된 행을 참조하는 다른행을 수정하는 상황)&lt;/li&gt;
      &lt;li&gt;동시성 문제 : 객체를 읽고 이를 대상으로 작업할 때는 다른 프로세스가 이 객체를 변경하지 못하도록 읽기를 격리해야 한다. 그렇지 않으면 일관성 문제가 발생하고 객체에 잘못된 데이터가 저장될 수 있다.&lt;/li&gt;
      &lt;li&gt;작업 단위 :  위 두가지 문제를 해결하기 위해 꼭 필요한 패턴이다. 작업단위는 비즈니스 트랜잭션의 영향을 받은 객체의 리스르를 유지 관리하고, 변경 내용을 기록하는 일과 동시성 문제를 해결하는 일을 조율한다.&lt;/li&gt;
      &lt;li&gt;객체를 로드할때 같은 객체를 두번 로드하지 않게 주의해야 한다. 같은 객체를 두번 로드하면 업데이트 같은 상황에서 예기치 못한 결과가 발생된다. 해당 문제는 식별자 맵을 사용해 해결가능 식별자 맵은 모든 객체를 한 맵에 로드해 각 객체가 한번씩만 로드되게 한다.객체를 참조할 때는 맵을 이용해 객체를 조회한다.&lt;/li&gt;
      &lt;li&gt;여러 객체가 복잡하게 상호 연결된 겨우 어떤 객체를 읽더라도 데이터베이스에 막대한 규모의 객체 그래프가 선택될 수 있다. 해당 상황을 해결하기 위해 지연 로드를 사용 지연로드는 객체 참조 대신 자리표시자를 이용하는 기법.
        &lt;ol&gt;
          &lt;li&gt;데이터 읽기&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;데이터베이스와 상호작용하는 클래스가  테이블 기반인 경우 데이터베이스의 테이블마다 클래스 인스턴스가 하나씩 있으므로 검색기 메서드(SQL select)를 삽입 및 업데이 트와 결합하는 방법을 쓸수 있다.&lt;/li&gt;
      &lt;li&gt;행기반 클래스를 사욯나는 경우 검색 작업을 정적으로 만들 수 있지만 데이터베이스 작업을 대체할 수 없게 된다. 이 문제를 해결하는 가장 좋은 방법은 검색기 객첼르 별도로 만드는 것이다.&lt;/li&gt;
      &lt;li&gt;데이터 베이스 성능 문제로 고려해야 되는 사항.
        &lt;ul&gt;
          &lt;li&gt;가급적 여러행을 한 번에 읽는다. 특히 같은 테이블에서 여러 행을 읽기 위해 반복적으로 쿼리하는일이 없게 해야 한다.&lt;/li&gt;
          &lt;li&gt;조인을 사용해 쿼리 하나로 여러 테이블을 한번에 가져 오게하여 성능을 향상. 조인은 쿼리당 최대 3-4개  조인 사용 더 많이 사용하면 성능 저하의 요인이 된다.&lt;/li&gt;
          &lt;li&gt;그외 다양한 최적화 : 클러스터링, 세심한 인덱스 사용, 메모리 캐시 활용.
            &lt;ol&gt;
              &lt;li&gt;구조적 매핑 패턴&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;관계 매핑 : 객체와 관계형 데이터베이스를 처리하는 방법에는 차이가 있으며, 이 때문에 두가지 문제가 밸생된다.
        &lt;ul&gt;
          &lt;li&gt;참조 방법의 차이: 객체는 참조 를 저장한는 방법으로 연결을 처리한다. 관계형 데이터베이스는 다른 테이블의 대한 키를 생성해 연결을 처리한다.&lt;/li&gt;
          &lt;li&gt;객체는 컬렉션을 사용해 단일 필드로 손쉽게 여러 참조를 처리 할 수 있는 반면 관계형은 정규화를 지원하기 위해 모든 연관 링크가 단일 값을 가져야 한다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;상속 : SQL에는 상속을 처리하는 표준적인 방법이 없기 때문에 이 경우에도 매핑을 이용해야 한다.&lt;/li&gt;
      &lt;li&gt;상속을 처리하는 3가지 방법
        &lt;ul&gt;
          &lt;li&gt;단일 테이블 상속 : 모든 클래스에 대해 테이블 하나를 사용&lt;/li&gt;
          &lt;li&gt;구현 테이블 상속 : 각 구현 클래스당 테이블 하나를 사용&lt;/li&gt;
          &lt;li&gt;클래스 테이블 상속 :  계층의 클래스당 테이블 하나를 사용
            &lt;ol&gt;
              &lt;li&gt;매핑&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;관계형 데이터 베이스로 매핑할 때는 기본적으로 세가지 상황중 하나에 해당한다.
        &lt;ul&gt;
          &lt;li&gt;스키마를 직접 선택할 수 있다.&lt;/li&gt;
          &lt;li&gt;기존의 스키마로 매핑해야 하며, 스키마를 변경할 수 없다.&lt;/li&gt;
          &lt;li&gt;기존의 스키마로 매핑해야 하지만 합의를 통해 스키마를 변경할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;가장 간단한 경우는 스키마를 직접 만들며, 중간 또는 낮은 복자도의 도메인 논리를 위해 설계에 트랜잭션 스크립트나 테이블 모듈을 사욯하는 경우는 도메인 놀리에서 SQL을 가져오는 데는 행 데이터 게이트웨이나 테이블 데이터 게이트웨이를 사욯한다.&lt;/li&gt;
      &lt;li&gt;도메인 모델을 사용할 때는 도메인 논리를 간소화하는데 집중하면서 도메인 모델을 구축한다. 데이터베이스 설계는 객체의 데이터를 지속하는 방법으로 취급한다. 데이터 매퍼는 유연성은 높지만 복잡하므로 활성 레코드 사용을 고려해야 함.&lt;/li&gt;
      &lt;li&gt;스키마가 이미 있는 경우
        &lt;ul&gt;
          &lt;li&gt;도메인 논리가 간단할 경우 : 데이터베이스를 모방하는 행 데이터 게이트웨이나 테이블 데이터 게이트웨이 클래스를 만들고 이 위에 도메인 논리를 배치한다.&lt;/li&gt;
          &lt;li&gt;도메인 논리가 복잡할 경우 : 도메인 모델이 필요하며, 이 도메인 모델은 데이터베이스 설계와는 일치하지 않을 가능성이 높다. 따라서 도메인 모델을 점진적으로 구축하면서 데이터를 기존 데이터베이스에 저장할 데이터 매퍼를 포함하면 된다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;이중 매핑
        &lt;ul&gt;
          &lt;li&gt;이중 맵핑을 사용해야 되는 케이스
            &lt;ol&gt;
              &lt;li&gt;여러 데이터베이스에 동일한 데이터가 포함되지만 복사/붙여넣기 재사용 방법  때문에 스미카에 차이가 있는 경우&lt;/li&gt;
              &lt;li&gt;다른 메커니즘으로 저장하는 경우, 데이터를 데이터 베이스에 저장하거나 때로는 메시지(xml 메시지, cicis 트랜잭션)에 저장하는 경우.&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
          &lt;li&gt;이중 맵핑 구현방법
            &lt;ol&gt;
              &lt;li&gt;가장 간단한 방법은  데이터 원본마다 하나씩, 매핑 계층을 여러개로 만든 것. 데이터가 아주 비슷한 경우 코드 중복이 심해 질수 있다.&lt;/li&gt;
              &lt;li&gt;2단계 매핑 스키마
                &lt;ul&gt;
                  &lt;li&gt;첫번째 단계는 데이터를 인메모리 스키마에서 논리적 데이터 자장소 스키마로 변환&lt;/li&gt;
                  &lt;li&gt;두번째 단계는 논리적 데이터 저장소 스키마에서 실제 물리적 데이터 자장소 스키마로 매핑
                    &lt;ol&gt;
                      &lt;li&gt;메타데이터 사용&lt;/li&gt;
                    &lt;/ol&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;메타데이터 매핑 :  데이터베이스의 열이 객체의 필드에 매핑되는 구체적인 방법을 메타데이터 파일에 기록하는 것이다. 핵심은 일단 메타데이터를 만든 후에는 코드 생성이나 리플렉션 프로그래밍을 통해 반복적 코드를 대신할 수 있다는 것이다.
        &lt;ul&gt;
          &lt;li&gt;리플렉션 : 리플렉션이란 객체를 통해 클래스의 정보를 분석해 내는 프로그램 기법을 말한다. (투영, 반사 라는 사전적인 의미를 지니고 있다.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;메타데이터 매핑은 인메모리 객체를 얻는 쿼리를 작성하는데 필요한 기반 정보를 제공한다.&lt;/li&gt;
      &lt;li&gt;쿼리 객체는 메타데이터 매핑을 이용해 객체 필드에 필요한 정보를 적절한 SQL로 변환 한다. 이를 더 발전시켜 뷰에서 데이터 베이스를 볼수 없게 하는 리포지토리를 만들 수 있다. 리포지토리는 리치 도메인 시스템과 아주 잘어울린다.
        &lt;ul&gt;
          &lt;li&gt;리포지토리 :  도메인 객체에 접근하는 컬렉션과 비슷한 인터페이스를 사용해 도메인과 데이터 매핑 계층 사이를 중재한다.
            &lt;ol&gt;
              &lt;li&gt;데이터베이스 연결&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;대부분의 데이터베이스 인터페이스는 애플리케이션 코드와 데이터베이스 간의링크 역활을 하는 일종의 데이터베이스 연결 객체를 사용한다. 이러한 연결을 먼저 열어야 데이터베이스에 대한 명령을 실행 할 수 있다.&lt;/li&gt;
      &lt;li&gt;연결을 만드는 데 드는 비용을 절약하기 위해 연결 풀(jdbc connector?)을 사용하는 경우가 많다. 이경우 개발자는 직접 연결을 만들고 닫는 대신 연결이 필요할 때 풀에서 요청하며 작업이 끝나면 연결을 풀로 반환한다.&lt;/li&gt;
      &lt;li&gt;연결은 만드는 비용이 크든 작든 관리가 필요하다. 연결은 관리하는데 비용이 많이 발생 사용이 끝나면 즉시 닫아야 한다.&lt;/li&gt;
      &lt;li&gt;연결이 필요한 모든곳에서 연결을 확보하는 방법
        &lt;ol&gt;
          &lt;li&gt;연결을 명시적 매개변수로 전달하는 것 : 이 방법의 문제는 불필요하게 모든 종유의 메서드 호출에 연경을 함께 전달해야 한다는 것이다. 이 문제는 레지스트리를 사용해 해결할 수 있다.&lt;/li&gt;
          &lt;li&gt;트랜잭션과 함께 연결을 관리하는 것 : 트랜잭션을 시작할 때 연경을 열고, 커밋하거나 롤백할 때 연결을 닫는다.&lt;/li&gt;
          &lt;li&gt;기타 주의사항&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;select * from 형식 : 새열이 추가되거나 열이 재정렬 되면 일부 데이터베이스 드라이버에서 심각한 문제를 발생할 수 있다. 인덱슬르 사용해 열에서 정보를 얻을때는 사용하지 않는 편이 좋다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">관계형 데이터 베이스란 우리가 흔히 말하는 DB(ex:db2) 를 말하는것 같다.데이터 원본 계층에서 가장 중요한 일은 데이터베이스와 상호 작용하는 것이며 아래에서 여러 패턴에 대해서 알아보자 게이트웨이 : SQL 접근을 도메인 논리와는 별도로 불리하고 개별 클래스에 배치 하는 것이 좋다. 이런 클래스를 데이터베이스 테이블당 클래스 하나를 가지도록 구성한 것. 게이트웨이를 구성한는 이유 : SQL을 쉽게 찾을 수 있게 하여 데이터 베이스에 전문 지식이 있는 개발자는 이런 특화 클래스에 집중하게 하고 애플리케이션 나머지 부분에서는 SQL에 대해 알 필요가 없게 하기 위함. 행 데이터 게이트웨이 : 쿼리가 반환하는 각 행마다 인스턴스 하나를 만드는 것. 테이블 데이터 게이트웨이 : 테이블당 인스턴스 하나를 만드는 것, 데이터 베이스를 쿼리하고 레코드 집합을 반환하는 메서드를 제공. 레코드 집합 : 데이터베이스의 테이블식 특성을 흉내 낸 테이블과 행의 범용 자료구조 게이트웨이 적용사례 테이블 모듈에서 테이블 데이터 게이트웨이를 사용하는 것이 적합. 저장 프로시저를 정리하는데도 이 패턴을 고려할 수 있다. 도메인 모델에서 사용할 때 활성 레코드 구조를 이용한 사례 : 활성레코드란 데이터베이스 테이블이나 뷰의 행을 래핑하고, 데이터 베이스 접근을 캡슐화하며, 해당 데이터에 대한 도메인 논리를 추가하는 객체, 간단한 애플리케이션에서 활용하는게 적절. 단점 1: 도메인 논리가 복잡해지면 점차 리치 도메인( 뭔가 안좋은 거에는 리치를 붙인거를 봐서는 좋은 의미는 아닌거 같음)에 가까워지고 활성 레코드의 간단한 접근법으로는 주체 못하게 된다. 단점 2: 관계형 데이터 베이스에서는 상속을 지원하지 않으므로 객채지향 패턴을 적용하기 어렵다. 단점 3: 도메인 논리를 개발하는동안 데이터베이스와 상호 작용하지 않고도 도메인 논리를 테스트 할 수 있는 방법이 필요. 데이터 매퍼를 이용한 사례 : 데이터 매퍼란 객체와 데이터베이스 사이에서 둘 사이는 물론 매퍼 자체에 대한 독립성을 유지하면서 데이터를 옮기는 메퍼의 한계층이다. 도메인 모델을 데이터베이스로부터 격리하여 서로 독립적으로 작동할 수있게 중간에서 로직을 처리한다. 복잡한 논리에서 사용이 적합. 2. 객체지향 데이터 베이스 : 객체지향 초창기에 객체와 관계간 근본적인 임피던스 부정합 이 있다는것을 깨닫고 객체지향 데이터 베이스를 만들었다. 인피던스 부정합(impedance mismatch) : 기존 관계형 데이터베이스의 SQL과 프로그래밍 언어 사이에 데이터 구조, 기능 등의 차이로 발생하는 충돌. 객체지향 데이터 베이스의 장점으로는 생산성 향상을 들 수 있다. 매핑을 신경 쓸 필요가 없다. 상호 연결된 거대한 객체의 구조를 그대로 사용할 수 있다. 객체를 저장하고 가져오는 작업을 데이터베이스가 알아서 처리한다. 트랜잭션을 이용해 데이터 저장소의 업데이트와 공유 허용을 그룹화 할 수 있다. 이미 입증된 관계형 데이터 베이스에 비해 위험성이 높아 널리 사용되지 않는다. 객체지향 데이터 베이스를 사용할 수 없더라도 설계에 도메인 모델이 있다면 O/R 매핑 툴(ex : 하이버네이트)을 도입하는것을 고려해야 함. O/R 매핑 : 객체 관계 매핑(Object-relational mapping; ORM)은 데이터베이스와 객체 지향 프로그래밍 언어 간의 호환되지 않는 데이터를 변환하는 프로그래밍 기법이다. 객체 지향 언어에서 사용할 수 있는 “가상” 객체 데이터베이스를 구축하는 방법이다. 동작 문제 추적 문제 : 다수의 객체를 메모리로 로드하고 수정할 때는 객체를 데이터베이스에 올바르게 기록하기 위해 수정한 객체를 모두 추적해야 된다. 복잡한 상황에서 고려해야 되는 것이 많다.(ex : 새로 생성된 행을 참조하는 다른행을 수정하는 상황) 동시성 문제 : 객체를 읽고 이를 대상으로 작업할 때는 다른 프로세스가 이 객체를 변경하지 못하도록 읽기를 격리해야 한다. 그렇지 않으면 일관성 문제가 발생하고 객체에 잘못된 데이터가 저장될 수 있다. 작업 단위 : 위 두가지 문제를 해결하기 위해 꼭 필요한 패턴이다. 작업단위는 비즈니스 트랜잭션의 영향을 받은 객체의 리스르를 유지 관리하고, 변경 내용을 기록하는 일과 동시성 문제를 해결하는 일을 조율한다. 객체를 로드할때 같은 객체를 두번 로드하지 않게 주의해야 한다. 같은 객체를 두번 로드하면 업데이트 같은 상황에서 예기치 못한 결과가 발생된다. 해당 문제는 식별자 맵을 사용해 해결가능 식별자 맵은 모든 객체를 한 맵에 로드해 각 객체가 한번씩만 로드되게 한다.객체를 참조할 때는 맵을 이용해 객체를 조회한다. 여러 객체가 복잡하게 상호 연결된 겨우 어떤 객체를 읽더라도 데이터베이스에 막대한 규모의 객체 그래프가 선택될 수 있다. 해당 상황을 해결하기 위해 지연 로드를 사용 지연로드는 객체 참조 대신 자리표시자를 이용하는 기법. 데이터 읽기 데이터베이스와 상호작용하는 클래스가 테이블 기반인 경우 데이터베이스의 테이블마다 클래스 인스턴스가 하나씩 있으므로 검색기 메서드(SQL select)를 삽입 및 업데이 트와 결합하는 방법을 쓸수 있다. 행기반 클래스를 사욯나는 경우 검색 작업을 정적으로 만들 수 있지만 데이터베이스 작업을 대체할 수 없게 된다. 이 문제를 해결하는 가장 좋은 방법은 검색기 객첼르 별도로 만드는 것이다. 데이터 베이스 성능 문제로 고려해야 되는 사항. 가급적 여러행을 한 번에 읽는다. 특히 같은 테이블에서 여러 행을 읽기 위해 반복적으로 쿼리하는일이 없게 해야 한다. 조인을 사용해 쿼리 하나로 여러 테이블을 한번에 가져 오게하여 성능을 향상. 조인은 쿼리당 최대 3-4개 조인 사용 더 많이 사용하면 성능 저하의 요인이 된다. 그외 다양한 최적화 : 클러스터링, 세심한 인덱스 사용, 메모리 캐시 활용. 구조적 매핑 패턴 관계 매핑 : 객체와 관계형 데이터베이스를 처리하는 방법에는 차이가 있으며, 이 때문에 두가지 문제가 밸생된다. 참조 방법의 차이: 객체는 참조 를 저장한는 방법으로 연결을 처리한다. 관계형 데이터베이스는 다른 테이블의 대한 키를 생성해 연결을 처리한다. 객체는 컬렉션을 사용해 단일 필드로 손쉽게 여러 참조를 처리 할 수 있는 반면 관계형은 정규화를 지원하기 위해 모든 연관 링크가 단일 값을 가져야 한다. 상속 : SQL에는 상속을 처리하는 표준적인 방법이 없기 때문에 이 경우에도 매핑을 이용해야 한다. 상속을 처리하는 3가지 방법 단일 테이블 상속 : 모든 클래스에 대해 테이블 하나를 사용 구현 테이블 상속 : 각 구현 클래스당 테이블 하나를 사용 클래스 테이블 상속 : 계층의 클래스당 테이블 하나를 사용 매핑 관계형 데이터 베이스로 매핑할 때는 기본적으로 세가지 상황중 하나에 해당한다. 스키마를 직접 선택할 수 있다. 기존의 스키마로 매핑해야 하며, 스키마를 변경할 수 없다. 기존의 스키마로 매핑해야 하지만 합의를 통해 스키마를 변경할 수 있다. 가장 간단한 경우는 스키마를 직접 만들며, 중간 또는 낮은 복자도의 도메인 논리를 위해 설계에 트랜잭션 스크립트나 테이블 모듈을 사욯하는 경우는 도메인 놀리에서 SQL을 가져오는 데는 행 데이터 게이트웨이나 테이블 데이터 게이트웨이를 사욯한다. 도메인 모델을 사용할 때는 도메인 논리를 간소화하는데 집중하면서 도메인 모델을 구축한다. 데이터베이스 설계는 객체의 데이터를 지속하는 방법으로 취급한다. 데이터 매퍼는 유연성은 높지만 복잡하므로 활성 레코드 사용을 고려해야 함. 스키마가 이미 있는 경우 도메인 논리가 간단할 경우 : 데이터베이스를 모방하는 행 데이터 게이트웨이나 테이블 데이터 게이트웨이 클래스를 만들고 이 위에 도메인 논리를 배치한다. 도메인 논리가 복잡할 경우 : 도메인 모델이 필요하며, 이 도메인 모델은 데이터베이스 설계와는 일치하지 않을 가능성이 높다. 따라서 도메인 모델을 점진적으로 구축하면서 데이터를 기존 데이터베이스에 저장할 데이터 매퍼를 포함하면 된다. 이중 매핑 이중 맵핑을 사용해야 되는 케이스 여러 데이터베이스에 동일한 데이터가 포함되지만 복사/붙여넣기 재사용 방법 때문에 스미카에 차이가 있는 경우 다른 메커니즘으로 저장하는 경우, 데이터를 데이터 베이스에 저장하거나 때로는 메시지(xml 메시지, cicis 트랜잭션)에 저장하는 경우. 이중 맵핑 구현방법 가장 간단한 방법은 데이터 원본마다 하나씩, 매핑 계층을 여러개로 만든 것. 데이터가 아주 비슷한 경우 코드 중복이 심해 질수 있다. 2단계 매핑 스키마 첫번째 단계는 데이터를 인메모리 스키마에서 논리적 데이터 자장소 스키마로 변환 두번째 단계는 논리적 데이터 저장소 스키마에서 실제 물리적 데이터 자장소 스키마로 매핑 메타데이터 사용 메타데이터 매핑 : 데이터베이스의 열이 객체의 필드에 매핑되는 구체적인 방법을 메타데이터 파일에 기록하는 것이다. 핵심은 일단 메타데이터를 만든 후에는 코드 생성이나 리플렉션 프로그래밍을 통해 반복적 코드를 대신할 수 있다는 것이다. 리플렉션 : 리플렉션이란 객체를 통해 클래스의 정보를 분석해 내는 프로그램 기법을 말한다. (투영, 반사 라는 사전적인 의미를 지니고 있다.) 메타데이터 매핑은 인메모리 객체를 얻는 쿼리를 작성하는데 필요한 기반 정보를 제공한다. 쿼리 객체는 메타데이터 매핑을 이용해 객체 필드에 필요한 정보를 적절한 SQL로 변환 한다. 이를 더 발전시켜 뷰에서 데이터 베이스를 볼수 없게 하는 리포지토리를 만들 수 있다. 리포지토리는 리치 도메인 시스템과 아주 잘어울린다. 리포지토리 : 도메인 객체에 접근하는 컬렉션과 비슷한 인터페이스를 사용해 도메인과 데이터 매핑 계층 사이를 중재한다. 데이터베이스 연결 대부분의 데이터베이스 인터페이스는 애플리케이션 코드와 데이터베이스 간의링크 역활을 하는 일종의 데이터베이스 연결 객체를 사용한다. 이러한 연결을 먼저 열어야 데이터베이스에 대한 명령을 실행 할 수 있다. 연결을 만드는 데 드는 비용을 절약하기 위해 연결 풀(jdbc connector?)을 사용하는 경우가 많다. 이경우 개발자는 직접 연결을 만들고 닫는 대신 연결이 필요할 때 풀에서 요청하며 작업이 끝나면 연결을 풀로 반환한다. 연결은 만드는 비용이 크든 작든 관리가 필요하다. 연결은 관리하는데 비용이 많이 발생 사용이 끝나면 즉시 닫아야 한다. 연결이 필요한 모든곳에서 연결을 확보하는 방법 연결을 명시적 매개변수로 전달하는 것 : 이 방법의 문제는 불필요하게 모든 종유의 메서드 호출에 연경을 함께 전달해야 한다는 것이다. 이 문제는 레지스트리를 사용해 해결할 수 있다. 트랜잭션과 함께 연결을 관리하는 것 : 트랜잭션을 시작할 때 연경을 열고, 커밋하거나 롤백할 때 연결을 닫는다. 기타 주의사항 select * from 형식 : 새열이 추가되거나 열이 재정렬 되면 일부 데이터베이스 드라이버에서 심각한 문제를 발생할 수 있다. 인덱슬르 사용해 열에서 정보를 얻을때는 사용하지 않는 편이 좋다.</summary></entry><entry><title type="html">01장 계층화</title><link href="http://localhost:4000/jekyll/update/2021/11/17/1%EC%9E%A5.html" rel="alternate" type="text/html" title="01장 계층화" /><published>2021-11-17T13:51:03+09:00</published><updated>2021-11-17T13:51:03+09:00</updated><id>http://localhost:4000/jekyll/update/2021/11/17/1%EC%9E%A5</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2021/11/17/1%EC%9E%A5.html">&lt;ol&gt;
  &lt;li&gt;계층화 정의 : 소프트웨어 설계자가 복잡한 소프트웨어 시스템을 분할하는 데 사용하는 가장 일반적인 기법.&lt;/li&gt;
  &lt;li&gt;계층화의 장점
    &lt;ul&gt;
      &lt;li&gt;다른 계층에 대한 정보 없이도 단일 계층을 하나의 일관된 계층으로 이해할 수 있다.&lt;/li&gt;
      &lt;li&gt;동일한 기본 서비스를 가진 대안 구현으로 계층을 대체할 수 있다.&lt;/li&gt;
      &lt;li&gt;계층 간의 의존성을 최소화할 수 있다.&lt;/li&gt;
      &lt;li&gt;계층은 표준화하기 좋은 위치다.&lt;/li&gt;
      &lt;li&gt;한번 구축한 계층은 여러 다른 상위 서비스에서 사용할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;계층화의 단점
    &lt;ul&gt;
      &lt;li&gt;계층은 전체가 효과적으로 캡슐화되지 않는다. 그 결과, 뭔가를 변경했을 때 다른 계층에 영향을 미치는 경우가 있다.&lt;/li&gt;
      &lt;li&gt;계층을 추가하면 성능이 저하된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;엔터프라이즈 애플리케이션에서 계층의 발전
    &lt;ul&gt;
      &lt;li&gt;일괄 처리 시스템
        &lt;ul&gt;
          &lt;li&gt;이시절 계층화는 그리 중요한 개념이 아님,  ISAMS, VSAM등 파일을 조작하는 것으로 충분했기 때문&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;90년대 클라이언트-서버 시스템의 등장
        &lt;ul&gt;
          &lt;li&gt;클라이언트-서버 시스템이란 클라이언트가 사용자 인터페이스와 다른 애플리케이션 코드를 포함하고 서버가 관계형 데이터베이스를 포함하는 2계층 시스템&lt;/li&gt;
          &lt;li&gt;단순 업데이트 하는 간단한 기능을 수행하는데 적합.&lt;/li&gt;
          &lt;li&gt;문제점 1 : 도메인 논리(계산, 유효성 검사, 계산 등) 변경이 이루어 졌을 때 수많은 코드를  찾아야 함.&lt;/li&gt;
          &lt;li&gt;문제점 2: 문제점 1대안으로 프로시저를 만들었는데 프로시저는 공급 업체별로 다르기 때문에 종속성 문제가 발생.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;객체지향 세계의 시작과 웹의 등장
        &lt;ul&gt;
          &lt;li&gt;객체지향 커뮤니티에서 도메인 논리에 대한 해결책으로 3계층 시스템을 제안.&lt;/li&gt;
          &lt;li&gt;웹의 등장으로 웹배포를 위한 3계층 시스템 도입이 필요하게 되었다.
            &lt;ul&gt;
              &lt;li&gt;티어 : 물리적 분리를 함축하는 경우. (ex : 클라이언트-서버 시스템 은 2계층)&lt;/li&gt;
              &lt;li&gt;계층 : 다른시스템에서 실행할 필요가 없음을 강조하기 위해 계층이라는 용어를 사용&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;세 가지 주요 계층
    &lt;ul&gt;
      &lt;li&gt;프레젠테이션 :서비스 제공, 정보 표시(창 또는 HTML),  사용자 요청(마우스 클릭, 키누름), HTTP 요청, 명령줄 호출, 일괄 작업 API 처리&lt;/li&gt;
      &lt;li&gt;도메인 : 시스템의 핵심이 되는 논리&lt;/li&gt;
      &lt;li&gt;데이터 원본 : 데이터 베이스, 메시징 시스템, 트랜잭션 관리자 및 다른 패키지와 의 통신&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;계층이 실행될 위치 선택
    &lt;ul&gt;
      &lt;li&gt;서버에서 모든걸 실행했을 때의 장점
        &lt;ul&gt;
          &lt;li&gt;업그레이드나 수정이 쉽다.&lt;/li&gt;
          &lt;li&gt;데스크톱 서버 동기화를 신경쓰지 않아도 된다.&lt;/li&gt;
          &lt;li&gt;다른 데스크톱 소프트웨어와의 호환성 문제도 없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;클라이언트에서 모든걸 실행했을 때의 장점
        &lt;ul&gt;
          &lt;li&gt;응답성이나 비연결 작업이 유리함.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;계층별로 실행 할 수 있는 위치 선택
        &lt;ul&gt;
          &lt;li&gt;프레젠테이션 계층 : 사용자 인터페이스의 유형에 따라 달라진다. 리치 클라이언트의 경우 대부분 클라이언트에서 실행, 웹 인터페이스의 경우 거의 대부분 서버에서 실행. 특별한 사유가 없으면 웹에서 실행되는 프레젠 테이션을 권장.&lt;/li&gt;
          &lt;li&gt;도메인 논리 계층 : 서버 , 클라이언트 모두 실행 가능 하나 서버에서 실행하는 것이 유지 관리를 생각할 때 최선의 방법 모든 논리를 한곳에서 관리 할 수 있기 때문. 일부 클라이언트에서 실행할 경우 다른 시스템에 의존하지 않는 독립적 모듈로 만들 것.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">계층화 정의 : 소프트웨어 설계자가 복잡한 소프트웨어 시스템을 분할하는 데 사용하는 가장 일반적인 기법. 계층화의 장점 다른 계층에 대한 정보 없이도 단일 계층을 하나의 일관된 계층으로 이해할 수 있다. 동일한 기본 서비스를 가진 대안 구현으로 계층을 대체할 수 있다. 계층 간의 의존성을 최소화할 수 있다. 계층은 표준화하기 좋은 위치다. 한번 구축한 계층은 여러 다른 상위 서비스에서 사용할 수 있다. 계층화의 단점 계층은 전체가 효과적으로 캡슐화되지 않는다. 그 결과, 뭔가를 변경했을 때 다른 계층에 영향을 미치는 경우가 있다. 계층을 추가하면 성능이 저하된다. 엔터프라이즈 애플리케이션에서 계층의 발전 일괄 처리 시스템 이시절 계층화는 그리 중요한 개념이 아님, ISAMS, VSAM등 파일을 조작하는 것으로 충분했기 때문 90년대 클라이언트-서버 시스템의 등장 클라이언트-서버 시스템이란 클라이언트가 사용자 인터페이스와 다른 애플리케이션 코드를 포함하고 서버가 관계형 데이터베이스를 포함하는 2계층 시스템 단순 업데이트 하는 간단한 기능을 수행하는데 적합. 문제점 1 : 도메인 논리(계산, 유효성 검사, 계산 등) 변경이 이루어 졌을 때 수많은 코드를 찾아야 함. 문제점 2: 문제점 1대안으로 프로시저를 만들었는데 프로시저는 공급 업체별로 다르기 때문에 종속성 문제가 발생. 객체지향 세계의 시작과 웹의 등장 객체지향 커뮤니티에서 도메인 논리에 대한 해결책으로 3계층 시스템을 제안. 웹의 등장으로 웹배포를 위한 3계층 시스템 도입이 필요하게 되었다. 티어 : 물리적 분리를 함축하는 경우. (ex : 클라이언트-서버 시스템 은 2계층) 계층 : 다른시스템에서 실행할 필요가 없음을 강조하기 위해 계층이라는 용어를 사용 세 가지 주요 계층 프레젠테이션 :서비스 제공, 정보 표시(창 또는 HTML), 사용자 요청(마우스 클릭, 키누름), HTTP 요청, 명령줄 호출, 일괄 작업 API 처리 도메인 : 시스템의 핵심이 되는 논리 데이터 원본 : 데이터 베이스, 메시징 시스템, 트랜잭션 관리자 및 다른 패키지와 의 통신 계층이 실행될 위치 선택 서버에서 모든걸 실행했을 때의 장점 업그레이드나 수정이 쉽다. 데스크톱 서버 동기화를 신경쓰지 않아도 된다. 다른 데스크톱 소프트웨어와의 호환성 문제도 없다. 클라이언트에서 모든걸 실행했을 때의 장점 응답성이나 비연결 작업이 유리함. 계층별로 실행 할 수 있는 위치 선택 프레젠테이션 계층 : 사용자 인터페이스의 유형에 따라 달라진다. 리치 클라이언트의 경우 대부분 클라이언트에서 실행, 웹 인터페이스의 경우 거의 대부분 서버에서 실행. 특별한 사유가 없으면 웹에서 실행되는 프레젠 테이션을 권장. 도메인 논리 계층 : 서버 , 클라이언트 모두 실행 가능 하나 서버에서 실행하는 것이 유지 관리를 생각할 때 최선의 방법 모든 논리를 한곳에서 관리 할 수 있기 때문. 일부 클라이언트에서 실행할 경우 다른 시스템에 의존하지 않는 독립적 모듈로 만들 것.</summary></entry><entry><title type="html">싱글톤 패턴</title><link href="http://localhost:4000/jekyll/update/2021/11/17/Singleton.html" rel="alternate" type="text/html" title="싱글톤 패턴" /><published>2021-11-17T13:33:03+09:00</published><updated>2021-11-17T13:33:03+09:00</updated><id>http://localhost:4000/jekyll/update/2021/11/17/Singleton</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2021/11/17/Singleton.html">&lt;ul&gt;
  &lt;li&gt;목표 : 싱글톤 패턴에 대해서 공부하여 자료를 만들고 스터디 그룹에서 발표한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Singleton 의 사전적 의미
    &lt;ul&gt;
      &lt;li&gt;(단독) 개체, 독신자(결혼을 안 했거나 애인이 없는 사람) , (쌍둥이가 아닌) 외둥이[단일아]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;싱글톤 패턴 정의.
    &lt;ul&gt;
      &lt;li&gt;클래스의 인스턴스를 하나만 생성하고, 어디서든 그 인스턴스를 참조할 수 있도록 하는 패턴.&lt;/li&gt;
      &lt;li&gt;여러 컴퓨터에서 프린터 한 대를 공유하는 경우, 한 대의 컴퓨터에서 프린트하고 있을 때 다른 컴퓨터가 프린트 명령을 내려도 현재 프린트하는 작업을 마치고 그다음 프린트를 해야지 두 작업이 섞여 나오면 문제가 될 것이다. 즉 여러 클라이언트(컴퓨터)가 동일 객체(공유 프린터)를 사용하지만 한 개의 객체(프린트 명령을 받은 출력물)가 유일하도록 상위 객체가 보장하지 못한다면 singleton 패턴을 적용해야 한다. 이처럼 동일한 자원이나 데이터를 처리하는 객체가 불필요하게 여러 개 만들어질 필요가 없는 경우에 주로 사용한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;싱글턴 패턴을 쓰는 이유?
    &lt;ul&gt;
      &lt;li&gt;고정된 메모리 영역을 가지고 하나의 인스턴스만 사용하기 때문에 메모리 낭비 방지&lt;/li&gt;
      &lt;li&gt;싱글턴 클래스의 인스턴스는 전역이기 때문에 다른 클래스의 인스턴스들이 데이터를 공유하기 쉬움&lt;/li&gt;
      &lt;li&gt;DBCP(DataBase Connection Pool) 처럼 공통된 객체를 여러 개 생성해야 하는 상황에 많이 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;싱글턴 구현
    &lt;ul&gt;
      &lt;li&gt;Eager initializaion
        &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;      public class EagerSington {
          private static EagerSington instance = new EagerSington();

          private EagerSington() {
          }

          public static EagerSington getInstance(){
              return instance;
          }
      }
&lt;/code&gt;&lt;/pre&gt;
        &lt;ul&gt;
          &lt;li&gt;클라이언트에서 사용하지 않더라도 인스턴스가 항상 생성됨&lt;/li&gt;
          &lt;li&gt;예외 처리를 할 수 있는 방법이 없음&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Static block initializaion
        &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;      public class StaticBlockSingleton {
          private static StaticBlockSingleton instace;

          static {
              try {
                  instace = new StaticBlockSingleton();
              } catch (Exception e) {
                  throw new RuntimeException(&quot;싱글톤 객체 생성 오류&quot;);
              }
          }
          public static StaticBlockSingleton getInstance(){
              return instace;
          }
      }
&lt;/code&gt;&lt;/pre&gt;
        &lt;ul&gt;
          &lt;li&gt;Eager initializaion과 유사, 인스턴스가  static block 내에서 생성됨.&lt;/li&gt;
          &lt;li&gt;예외 처리 가능&lt;/li&gt;
          &lt;li&gt;처음  시작할 때 초기화 되어 메모리 낭비 유발.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lazy initializaion
        &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;      import java.util.Objects;

      public class LazyInitializaitonSingletion {
          private static LazyInitializaitonSingletion instace;

          private LazyInitializaitonSingletion() {}

          public static LazyInitializaitonSingletion getInstance() {
              if(Objects.isNull(instace)) {
                  instace = new LazyInitializaitonSingletion();
              }
              return instace;
          }
      }
&lt;/code&gt;&lt;/pre&gt;
        &lt;ul&gt;
          &lt;li&gt;getInctace() 호출 이외에는 인스턴스를 생성하지 않음.&lt;/li&gt;
          &lt;li&gt;Eager initializaion의 단점을 보완&lt;/li&gt;
          &lt;li&gt;Thread safety 하지 않음.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Tread safe initializaion
        &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;      public class ThreadSafeSington {
          private static ThreadSafeSington instance;

          private ThreadSafeSington() {}

          public static synchronized ThreadSafeSington getInstance(){
              if(instance == null) {
                  instance = new ThreadSafeSington();
              }
              return instance;
          }
      }
&lt;/code&gt;&lt;/pre&gt;
        &lt;ul&gt;
          &lt;li&gt;synchronized를 이용해서 하나의 스레드만 접근 가능하도록 설정&lt;/li&gt;
          &lt;li&gt;성능 저하를 야기하는 비효율적인 방법(느리다.)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Double-Checked Locking
        &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;      private static DoubleCheckedLockingSingleton getInstance() {
          if (Objects.isNull(instace)) {
              synchronized (DoubleCheckedLockingSingleton.class) {
                  if (Objects.isNull(instace)) {
                      instace = new DoubleCheckedLockingSingleton();
                  }
              }
          }
          return instace;
      }
&lt;/code&gt;&lt;/pre&gt;
        &lt;ul&gt;
          &lt;li&gt;Null 체크를 synchronized 블록 밖에서 한번, 안에서 한번 총 두 번 실행&lt;/li&gt;
          &lt;li&gt;밖에서 하는 체크는 인스턴스가 있는 경우 빠르게 리턴하기 위해서 안쪽에서 하는 체크는 인스턴스가 생성되지 않은 경우 하나의 인스턴스만 생성하기 위해.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Bill Pugh Solution
        &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;      public class BillPughSingleton {
          private BillPughSingleton() {
          }

          private static class SingletonHelper {
              private static final BillPughSingleton instace = new BillPughSingleton();
          }

          public static BillPughSingleton getInstance() {
              return SingletonHelper.instace;
          }
      }
&lt;/code&gt;&lt;/pre&gt;
        &lt;ul&gt;
          &lt;li&gt;Double Checked에 비해 구현이 간단.&lt;/li&gt;
          &lt;li&gt;Lazy Loding이 가능&lt;/li&gt;
          &lt;li&gt;Thread safety&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Thread safety : 멀티 스레드 프로그래밍에서 일반적으로 어떤 함수나 변수, 혹은 객체가 여러 스레드로부터 동시에 접근이 이루어져도 프로그램의 실행에 문제가 없음을 뜻한다. 보다 엄밀하게는 하나의 함수가 한 스레드로부터 호출되어 실행 중일 때, 다른 스레드가 그 함수를 호출하여 동시에 함께 실행되더라도 각 스레드에서의 함수의 수행 결과가 올바로 나오는 것으로 정의한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">목표 : 싱글톤 패턴에 대해서 공부하여 자료를 만들고 스터디 그룹에서 발표한다.</summary></entry><entry><title type="html">02장 도메인 논리 구성</title><link href="http://localhost:4000/jekyll/update/2021/11/17/2%EC%9E%A5.html" rel="alternate" type="text/html" title="02장 도메인 논리 구성" /><published>2021-11-17T10:06:03+09:00</published><updated>2021-11-17T10:06:03+09:00</updated><id>http://localhost:4000/jekyll/update/2021/11/17/2%EC%9E%A5</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2021/11/17/2%EC%9E%A5.html">&lt;ol&gt;
  &lt;li&gt;도메인 논리의 3가지 주요 패턴
    &lt;ul&gt;
      &lt;li&gt;트랜잭션 스크립트 : 사용자가 수행할 각 작업마다 프로시저 하나씩 사용하는 방식.&lt;/li&gt;
      &lt;li&gt;도메인 모델 :   복잡한 논리 해결을 위한 객체 지향적 방법, 최종 객체가 결과를 내놓을때 까지 관련된 논리를 각 객체가 일부를 담당하는 방식.&lt;/li&gt;
      &lt;li&gt;테이블 모듈 : 트랜잭션 스크립트와 도메인 모델의 중간적인 성격, 데이터 베이스에 쿼리를 수행해 레코드 집합을 얻고 레코드 집한을 인수로 전달해 객체를 만들어 작업을 수행.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;트랜잭션 스크립트
    &lt;ul&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;대부분의 개발자가 이해할 수 있는 간단한 절차적 모델&lt;/li&gt;
          &lt;li&gt;행 데이터 게이트웨이나 테이블 데이터 게이트웨이를 적용해 데이터 원본 계층과 함께 사용하기에 적합&lt;/li&gt;
          &lt;li&gt;트랜잭션의 경계를 설정하기가 쉽다. 트랜잭션 열기와 함께 시작되고 트랜잭션 닫기와 함께 종료된다. 툴을 사용해 배후에서 이러한 작업을 하기도 쉽다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;도메인 논리가 늘어나면 복잡도가 상승&lt;/li&gt;
          &lt;li&gt;여러 트랜잭션이 비슷한 작업을 수행해야 하므로 코드가 많이 중복됨.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;도메인 모델
    &lt;ul&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;복잡한 논리를 체계적으로 관리할 수 있다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;데이터 원본 계층의 복잡성으로 좋은 데이터 원본 계층을 확보하는데 비용과 시간이 필요.&lt;/li&gt;
          &lt;li&gt;사용의 복잡성 으로 리치 객체 모델을 처음 시작하는 개발자가 도메인 모델에 익숙해 지는데 시간이 필요.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테이블 모듈
    &lt;ul&gt;
      &lt;li&gt;장점
        &lt;ul&gt;
          &lt;li&gt;테이블 기준으로 도메인 논리를 구성하기 때문에 구조를 만들고 중복을 찾아 제거하기 수월&lt;/li&gt;
          &lt;li&gt;아키텍처의 나머지 부분과 잘 맞음. (ex : 여러 GUI  환경에서 SQL 쿼리 결과를 활용)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;단점
        &lt;ul&gt;
          &lt;li&gt;상속, 전략, 다른 객체지향 패턴과 같이 논리의 세부 구조를 만드는 데 사용하는 여러 기법은 사용할 수  없다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;도메인 논리 선택
    &lt;ul&gt;
      &lt;li&gt;도메인 논리가 간단하면 도메인 모델 효율이 떨어지고 반대로 도메인 논리가 복잡하면 트랜잭션 스크립트와 테이블 모듈 효율성이 떨이짐.&lt;/li&gt;
      &lt;li&gt;테이블 모듈에 대한 선호도는 환경에서 레코드 집합을 얼마나 잘 지원 하느냐에 따라 결정(.NEW, 비쥬얼 스튜디오 같은 환경에서 유리)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;서비스 계층
    &lt;ul&gt;
      &lt;li&gt;도메인 논리를 처리하는 일반적인 방법 : 도메인 계층을 둘로 나누어 서비스 계층을 기반이 되는 도메인 모델이나 테이블 모듈 위에 배치.&lt;/li&gt;
      &lt;li&gt;트랜잭션 스크립트만 사용하는 도메인 계층은 복잡하지 않기 때문에  도메인 모델이나 테이블 모듈에만 사용.?&lt;/li&gt;
      &lt;li&gt;서비스 계층 사용 형식1 : 가장 소극적 사례로, 서비스 계층을 파사드로 만들고 모든 실제 동작을 기반 객체에 넣은 다음 서비스 계층이 파사드에 대한 호출을 하위 객체로 전달하게 하는것&lt;/li&gt;
      &lt;li&gt;서비스 계층 사용 형식2 : 형식 1과  반대되는 극단적 사례, 대부분의 비즈니스 논리를 서비스 계층 안에 트랜잭션 스크립트를 넣는 것.&lt;/li&gt;
      &lt;li&gt;컨트롤러-엔티티 형식 : 형식 1과, 형식 2의 중간적인 성격, 한 트랜잭션이나 유스 케이스에 적용되는 논리를 트랜잭션 스크립트에 넣는 것이며 일반적으로 컨트롤러나 서비스라고 한다.
    - 파사드 패턴 : Facade는 “건물의 정면”을 의미하는 단어로 어떤 소프트웨어의 다른 커다란 코드 부분에 대하여 간략화된 인터페이스를 제공해주는 디자인 패턴을 의미합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">도메인 논리의 3가지 주요 패턴 트랜잭션 스크립트 : 사용자가 수행할 각 작업마다 프로시저 하나씩 사용하는 방식. 도메인 모델 : 복잡한 논리 해결을 위한 객체 지향적 방법, 최종 객체가 결과를 내놓을때 까지 관련된 논리를 각 객체가 일부를 담당하는 방식. 테이블 모듈 : 트랜잭션 스크립트와 도메인 모델의 중간적인 성격, 데이터 베이스에 쿼리를 수행해 레코드 집합을 얻고 레코드 집한을 인수로 전달해 객체를 만들어 작업을 수행. 트랜잭션 스크립트 장점 대부분의 개발자가 이해할 수 있는 간단한 절차적 모델 행 데이터 게이트웨이나 테이블 데이터 게이트웨이를 적용해 데이터 원본 계층과 함께 사용하기에 적합 트랜잭션의 경계를 설정하기가 쉽다. 트랜잭션 열기와 함께 시작되고 트랜잭션 닫기와 함께 종료된다. 툴을 사용해 배후에서 이러한 작업을 하기도 쉽다. 단점 도메인 논리가 늘어나면 복잡도가 상승 여러 트랜잭션이 비슷한 작업을 수행해야 하므로 코드가 많이 중복됨. 도메인 모델 장점 복잡한 논리를 체계적으로 관리할 수 있다. 단점 데이터 원본 계층의 복잡성으로 좋은 데이터 원본 계층을 확보하는데 비용과 시간이 필요. 사용의 복잡성 으로 리치 객체 모델을 처음 시작하는 개발자가 도메인 모델에 익숙해 지는데 시간이 필요. 테이블 모듈 장점 테이블 기준으로 도메인 논리를 구성하기 때문에 구조를 만들고 중복을 찾아 제거하기 수월 아키텍처의 나머지 부분과 잘 맞음. (ex : 여러 GUI 환경에서 SQL 쿼리 결과를 활용) 단점 상속, 전략, 다른 객체지향 패턴과 같이 논리의 세부 구조를 만드는 데 사용하는 여러 기법은 사용할 수 없다. 도메인 논리 선택 도메인 논리가 간단하면 도메인 모델 효율이 떨어지고 반대로 도메인 논리가 복잡하면 트랜잭션 스크립트와 테이블 모듈 효율성이 떨이짐. 테이블 모듈에 대한 선호도는 환경에서 레코드 집합을 얼마나 잘 지원 하느냐에 따라 결정(.NEW, 비쥬얼 스튜디오 같은 환경에서 유리) 서비스 계층 도메인 논리를 처리하는 일반적인 방법 : 도메인 계층을 둘로 나누어 서비스 계층을 기반이 되는 도메인 모델이나 테이블 모듈 위에 배치. 트랜잭션 스크립트만 사용하는 도메인 계층은 복잡하지 않기 때문에 도메인 모델이나 테이블 모듈에만 사용.? 서비스 계층 사용 형식1 : 가장 소극적 사례로, 서비스 계층을 파사드로 만들고 모든 실제 동작을 기반 객체에 넣은 다음 서비스 계층이 파사드에 대한 호출을 하위 객체로 전달하게 하는것 서비스 계층 사용 형식2 : 형식 1과 반대되는 극단적 사례, 대부분의 비즈니스 논리를 서비스 계층 안에 트랜잭션 스크립트를 넣는 것. 컨트롤러-엔티티 형식 : 형식 1과, 형식 2의 중간적인 성격, 한 트랜잭션이나 유스 케이스에 적용되는 논리를 트랜잭션 스크립트에 넣는 것이며 일반적으로 컨트롤러나 서비스라고 한다. - 파사드 패턴 : Facade는 “건물의 정면”을 의미하는 단어로 어떤 소프트웨어의 다른 커다란 코드 부분에 대하여 간략화된 인터페이스를 제공해주는 디자인 패턴을 의미합니다.</summary></entry></feed>